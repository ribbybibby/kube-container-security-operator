package controllers

import (
	"context"
	"github.com/go-logr/logr"

	secscanv1alpha1 "github.com/ribbybibby/kube-container-security-operator/apis/secscan/v1alpha1"
	"github.com/ribbybibby/kube-container-security-operator/prometheus"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// VulerabilityReportReconciler reconciles vulnerabilityreports. All this currently
// involves is updating the metrics
type VulnerabilityReportReconciler struct {
	client.Client
	Log logr.Logger
}

// Reconcile vulnerabilityreport requests
func (vrr *VulnerabilityReportReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	_ = vrr.Log.WithValues("vulnerabilityreportwatcher", req.NamespacedName)

	if err := vrr.updateMetrics(ctx); err != nil {
		vrr.Log.Error(err, "Error updating metrics")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

// updateMetrics iterates over vulnerabilityreports and updates the
// relevant metrics
func (vrr *VulnerabilityReportReconciler) updateMetrics(ctx context.Context) error {
	prometheus.PromVulnerabilityReports.Reset()
	prometheus.PromVulnerabilities.Reset()
	prometheus.PromVulnerableImages.Reset()

	uniqueVulnerabilities := make(map[string][]string)
	uniqueImages := []string{}

	vulnReportList := &secscanv1alpha1.VulnerabilityReportList{}
	if err := vrr.Client.List(ctx, vulnReportList); err != nil {
		return err
	}
	for _, vr := range vulnReportList.Items {
		// Count up vulnerabilityreports by namespace and severity
		prometheus.PromVulnerabilityReports.WithLabelValues(vr.Namespace, vr.Spec.Summary.HighestSeverity).Inc()

		// Find unique vulnerabilities
		for _, vuln := range vr.Spec.Vulnerabilities {
			if !contains(uniqueVulnerabilities[vuln.Severity], vuln.VulnerabilityID) {
				uniqueVulnerabilities[vuln.Severity] = append(uniqueVulnerabilities[vuln.Severity], vuln.VulnerabilityID)
				prometheus.PromVulnerabilities.WithLabelValues(vuln.Severity).Inc()
			}
		}

		// Find unique images
		if !contains(uniqueImages, vr.Spec.Artifact.Digest) && vr.Spec.Summary.HighestSeverity != "" {
			uniqueImages = append(uniqueImages, vr.Spec.Artifact.Digest)
			prometheus.PromVulnerableImages.WithLabelValues(vr.Spec.Summary.HighestSeverity).Inc()
		}
	}

	return nil
}

// SetupWithManager sets the watcher up with the controller manager
func (vrr *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&secscanv1alpha1.VulnerabilityReport{}).
		Complete(vrr)
}
